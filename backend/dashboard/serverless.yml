
service: dashboard

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: blocky-${opt:stage, self:provider.stage}-${self:service}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:CreateTable
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  auth:
    handler: dashboard/auth.auth

  create:
    handler: dashboard/create.create
    events:
      - http:
          path: dashboard
          method: post
          authorizer: auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  delete:
    handler: dashboard/delete.delete
    events:
      - http:
          path: deletedashboard
          method: delete
          authorizer: auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  get:
    handler: dashboard/get.get
    events:
      - http:
          path: dashboard/{id}
          method: get
          authorizer: auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  list:
    handler: dashboard/list.list
    events:
      - http:
          path: listdashboard
          method: get
          authorizer: auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
  
  rename:
    handler : dashboard/rename.rename
    events :
      - http: 
          path : dashboard/{id}/rename
          method : put
          authorizer : auth
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
resources:
  Resources:
    DashboardsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          - 
            AttributeName : owner
            AttributeType: S
        KeySchema:
          -
            AttributeName : owner
            KeyType : HASH
          -
            AttributeName: id
            KeyType: RANGE
          
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
