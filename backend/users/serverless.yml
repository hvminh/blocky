
service: users

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: blocky-${opt:stage, self:provider.stage}-${self:service}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

functions:
  signup:
    handler: users/signup.signup
    events:
      - http:
          path: signup
          method: post
          cors: true

  login:
    handler: users/login.login
    events:
      - http:
          path: login
          method: post
          cors: true

  auth:
    handler: users/auth.auth

  changePassword:
    handler: users/changePassword.changePassword
    events:
      - http:
          path: changePassword
          method: post
          integration: lambda
          authorizer: auth # See custom authorizer docs here: http://bit.ly/2gXw9pO
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token

resources:
  Resources:
    UsersDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
